def permutations(str)
  return [str] if str.length <= 1

  result = []

  str.chars.each_with_index do |ch, i|
    # à¤¬à¤¾à¤•à¥€ à¤•à¥‡ characters à¤¨à¤¿à¤•à¤¾à¤²à¥‹
    remaining = str[0...i] + str[i+1..-1]

    # recursive call
    permutations(remaining).each do |perm|
      result << ch + perm
    end
  end

  result
end

puts permutations("abc").inspect


ğŸ”¹ Step 1: str.chars.each_with_index

ye string ko character array me todta hai aur har character ko index ke sath deta hai.

"abc".chars â†’ ["a","b","c"]

so loop chalega:

ch="a", i=0

ch="b", i=1

ch="c", i=2

ğŸ”¹ Step 2: remaining = str[0...i] + str[i+1..-1]

iska matlab hai: current character ch hata ke baaki string bachi hui.

agar ch="a", i=0
â†’ remaining = str[0...0] + str[1..-1]
â†’ "" + "bc" = "bc"

agar ch="b", i=1
â†’ remaining = str[0...1] + str[2..-1]
â†’ "a" + "c" = "ac"

agar ch="c", i=2
â†’ remaining = str[0...2] + str[3..-1]
â†’ "ab" + "" = "ab"

ğŸ”¹ Step 3: recursive call

permutations(remaining) call hota hai.
jaise "abc" ke case me:

ch="a" ke liye permutations("bc") nikalega â†’ ["bc","cb"]

fir har permutation me ch prepend karenge:

"a" + "bc" â†’ "abc"
"a" + "cb" â†’ "acb"

ğŸ”¹ Step 4: result me dalna

ye line:

result << ch + perm


har final permutation result array me store kar deti hai.

ğŸ”¥ Full dry run example: "abc"

Loop 1: ch="a" â†’ remaining "bc"
â†’ permutations("bc") = ["bc", "cb"]
â†’ add ["abc", "acb"]

Loop 2: ch="b" â†’ remaining "ac"
â†’ permutations("ac") = ["ac", "ca"]
â†’ add ["bac", "bca"]

Loop 3: ch="c" â†’ remaining "ab"
â†’ permutations("ab") = ["ab", "ba"]
â†’ add ["cab", "cba"]

âœ… final result = ["abc", "acb", "bac", "bca", "cab", "cba"]

bhai ab bata, kya me isko diagram flow bana ke samjhau (tree structure), jaise recursion tree hota hai?